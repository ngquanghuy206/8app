import telebot
import threading
import time
import re
import os

# L·ªõp ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa t·ª´ng bot
class BotState:
    def __init__(self, admin_id):
        self.ADMIN_ID = admin_id
        self.allowed_users = set()
        self.treo_list = {}
        self.treo_threads = {}
        self.treo_anh_list = {}

# Danh s√°ch c√°c tr·∫°ng th√°i bot
bot_states = {}

# Nh·∫≠p token ban ƒë·∫ßu
TOKENS = input("Nh·∫≠p Token Bot:").strip().split(',')
bots = [telebot.TeleBot(token.strip()) for token in TOKENS]

while True:
    try:
        initial_admin_id = int(input("ID Admin: ").strip())
        break
    except ValueError:
        print("‚ùå ID Admin ph·∫£i l√† s·ªë. Vui l√≤ng nh·∫≠p l·∫°i!")

# G√°n tr·∫°ng th√°i ban ƒë·∫ßu cho c√°c bot
for bot in bots:
    bot_states[bot.token] = BotState(initial_admin_id)

def is_authorized(bot, user_id):
    return user_id == bot_states[bot.token].ADMIN_ID or user_id in bot_states[bot.token].allowed_users

def read_txt_file(filename):
    if not os.path.exists(filename):
        return None
    with open(filename, 'r', encoding='utf-8') as file:
        return file.read()

def send_spam_image(bot, chat_id, file_name, delay, image_name, user_id):
    content = read_txt_file(file_name)
    if not content:
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ho·∫∑c file r·ªóng: `{file_name}`", parse_mode="Markdown")
        return

    if not os.path.exists(image_name):
        bot.send_message(user_id, f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh: `{image_name}`", parse_mode="Markdown")
        return

    while chat_id in bot_states[bot.token].treo_list.get(user_id, []):
        try:
            with open(image_name, 'rb') as img:
                bot.send_photo(chat_id, img, caption=content)
            print(f"‚úÖ ƒê√£ g·ª≠i ·∫£nh `{image_name}` v√†o nh√≥m {chat_id}")
        except Exception as e:
            if "429" in str(e):
                retry_after = int(re.search(r"retry after (\d+)", str(e)).group(1))
                print(f"‚ùå L·ªói 429! ƒê·ª£i {retry_after} gi√¢y.")
                time.sleep(retry_after)
            else:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        time.sleep(delay)

def send_spam_messages(bot, chat_id, file_name, delay, user_id):
    try:
        with open(file_name, "r", encoding="utf-8") as file:
            content = file.read().strip()

        while chat_id in bot_states[bot.token].treo_list.get(user_id, []):
            try:
                bot.send_message(chat_id, content)
                print(f"‚úÖ ƒê√£ g·ª≠i tin nh·∫Øn v√†o nh√≥m {chat_id}")
            except Exception as e:
                if "429" in str(e):
                    retry_after = int(re.search(r"retry after (\d+)", str(e)).group(1))
                    print(f"‚ùå L·ªói 429! ƒê·ª£i {retry_after} gi√¢y.")
                    time.sleep(retry_after)
                else:
                    print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            time.sleep(delay)

    except FileNotFoundError:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_name}")
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file: {e}")

def setup_handlers(bot):
    @bot.message_handler(commands=['treo'])
    def treo_message(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        match = re.findall(r'(-?\d+)\s+(\S+)\s+(\d+)', message.text)
        if not match:
            return bot.reply_to(message, "‚ö†Ô∏è Sai c√∫ ph√°p!\nV√≠ d·ª•: `/treo -1001234567890 noidung.txt 5`", parse_mode="Markdown")

        chat_id, file_name, delay = match[0]
        delay = int(delay)

        if message.from_user.id not in bot_states[bot.token].treo_list:
            bot_states[bot.token].treo_list[message.from_user.id] = []

        if chat_id not in bot_states[bot.token].treo_list[message.from_user.id]:
            bot_states[bot.token].treo_list[message.from_user.id].append(chat_id)

        thread = threading.Thread(target=send_spam_messages, args=(bot, chat_id, file_name, delay, message.from_user.id))
        thread.daemon = True
        thread.start()

        bot_states[bot.token].treo_threads[chat_id] = thread
        bot.reply_to(message, f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu g·ª≠i tin t·ª´ file `{file_name}` v√†o nh√≥m `{chat_id}`", parse_mode="Markdown")

    @bot.message_handler(commands=['stoptreo'])
    def stop_treo(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        args = message.text.split()
        if len(args) < 2:
            return bot.reply_to(message, "‚ö†Ô∏è Sai c√∫ ph√°p!\nV√≠ d·ª•: `/stoptreo -1001234567890`", parse_mode="Markdown")

        chat_id = args[1]

        if message.from_user.id in bot_states[bot.token].treo_list and chat_id in bot_states[bot.token].treo_list[message.from_user.id]:
            bot_states[bot.token].treo_list[message.from_user.id].remove(chat_id)
            bot.reply_to(message, f"‚úÖ ƒê√£ d·ª´ng treo {chat_id}")
        else:
            bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ tab treo n√†o v·ªõi ID n√†y!")

    @bot.message_handler(commands=['tabtreo'])
    def list_treo(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        if message.from_user.id not in bot_states[bot.token].treo_list or not bot_states[bot.token].treo_list[message.from_user.id]:
            return bot.reply_to(message, "üìã B·∫°n kh√¥ng c√≥ tab treo n√†o ƒëang ho·∫°t ƒë·ªông.")

        treo_info = "\n".join(f"- {group}" for group in bot_states[bot.token].treo_list[message.from_user.id])
        bot.reply_to(message, f"üìã Danh s√°ch tab treo c·ªßa b·∫°n:\n{treo_info}", parse_mode="Markdown")

    @bot.message_handler(commands=['id'])
    def send_user_id(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        if message.reply_to_message:
            user = message.reply_to_message.from_user
            bot.reply_to(message, f"üÜî ID c·ªßa {user.first_name}: {user.id}", parse_mode="Markdown")
        else:
            bot.reply_to(message, f"üÜî ID c·ªßa b·∫°n: {message.from_user.id}", parse_mode="Markdown")

    @bot.message_handler(commands=['idgroup'])
    def send_group_id(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        if message.chat.type in ['group', 'supergroup']:
            bot.reply_to(message, f"{message.chat.id}", parse_mode="Markdown")
        else:
            bot.reply_to(message, "‚ö†Ô∏è L·ªánh n√†y ch·ªâ ho·∫°t ƒë·ªông trong nh√≥m!")

    @bot.message_handler(commands=['menu'])
    def show_menu(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        menu_text = """üìú Danh s√°ch l·ªánh bot Dzi √ó Void:

/treo <idgroup> <file.txt> <delay> - Treo tin nh·∫Øn
/stoptreo <idgroup> - D·ª´ng treo
/treoanh <idgroup> <file.txt> <delay> <anh.jpg> - Treo ng√¥n k√®m ·∫£nh
/stoptreoanh <idgroup> - D·ª´ng treo ng√¥n ·∫£nh
/tabtreo - Xem c√°c tab treo
/id - Xem ID Telegram
/idgroup - Xem ID nh√≥m
/menu - Hi·ªÉn th·ªã danh s√°ch l·ªánh
/add <id> - Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch
/xoa <id> - X√≥a ng∆∞·ªùi d√πng kh·ªèi danh s√°ch
/list - Xem danh s√°ch ng∆∞·ªùi d√πng
/log <token> <idadmin> - Log th√™m acc bot"""
        bot.reply_to(message, menu_text, parse_mode="Markdown")

    @bot.message_handler(commands=['add'])
    def add_user(message):
        if message.from_user.id != bot_states[bot.token].ADMIN_ID:
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng ph·∫£i admin!")

        try:
            user_id = int(message.text.split()[1])
            bot_states[bot.token].allowed_users.add(user_id)
            bot.reply_to(message, f"‚úÖ ƒê√£ th√™m {user_id} v√†o danh s√°ch.")
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID h·ª£p l·ªá.\nV√≠ d·ª•: `/add 123456789`")

    @bot.message_handler(commands=['xoa'])
    def remove_user(message):
        if message.from_user.id != bot_states[bot.token].ADMIN_ID:
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng ph·∫£i admin!")

        try:
            user_id = int(message.text.split()[1])
            bot_states[bot.token].allowed_users.discard(user_id)
            bot.reply_to(message, f"‚úÖ ƒê√£ x√≥a {user_id} kh·ªèi danh s√°ch.")
        except (IndexError, ValueError):
            bot.reply_to(message, "‚ö†Ô∏è Vui l√≤ng nh·∫≠p ID h·ª£p l·ªá.\nV√≠ d·ª•: `/xoa 123456789`")

    @bot.message_handler(commands=['list'])
    def list_users(message):
        if message.from_user.id != bot_states[bot.token].ADMIN_ID:
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng ph·∫£i admin!")

        if bot_states[bot.token].allowed_users:
            user_list = "\n".join(f"- {uid}" for uid in bot_states[bot.token].allowed_users)
            bot.reply_to(message, f"üìã Danh s√°ch ng∆∞·ªùi d√πng:\n{user_list}", parse_mode="Markdown")
        else:
            bot.reply_to(message, "üìã Kh√¥ng c√≥ ai trong danh s√°ch.")

    @bot.message_handler(commands=['treoanh'])
    def treo_anh(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        match = re.findall(r'(-?\d+)\s+(\S+)\s+(\d+)\s+(\S+)', message.text)
        if not match:
            return bot.reply_to(message, "‚ö†Ô∏è Sai c√∫ ph√°p!\nV√≠ d·ª•: `/treoanh -1001234567890 noidung.txt 5 anh.jpg`", parse_mode="Markdown")

        chat_id, file_name, delay, image_name = match[0]
        delay = int(delay)

        if message.from_user.id not in bot_states[bot.token].treo_list:
            bot_states[bot.token].treo_list[message.from_user.id] = []

        if chat_id not in bot_states[bot.token].treo_list[message.from_user.id]:
            bot_states[bot.token].treo_list[message.from_user.id].append(chat_id)

        thread = threading.Thread(target=send_spam_image, args=(bot, chat_id, file_name, delay, image_name, message.from_user.id))
        thread.daemon = True
        thread.start()

        bot_states[bot.token].treo_threads[chat_id] = thread
        bot.reply_to(message, f"‚úÖ ƒê√£ b·∫Øt ƒë·∫ßu g·ª≠i `{file_name}` k√®m ·∫£nh `{image_name}` v√†o `{chat_id}`", parse_mode="Markdown")

    @bot.message_handler(commands=['stoptreoanh'])
    def stop_treo_anh(message):
        if not is_authorized(bot, message.from_user.id):
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng bot!")

        args = message.text.split()
        if len(args) < 2:
            return bot.reply_to(message, "‚ö†Ô∏è Sai c√∫ ph√°p!\nV√≠ d·ª•: `/stoptreoanh -1001234567890`", parse_mode="Markdown")

        chat_id = args[1]

        if message.from_user.id in bot_states[bot.token].treo_anh_list and chat_id in bot_states[bot.token].treo_anh_list[message.from_user.id]:
            bot_states[bot.token].treo_anh_list[message.from_user.id].remove(chat_id)
            bot.reply_to(message, f"‚úÖ ƒê√£ d·ª´ng treo ·∫£nh v√†o nh√≥m `{chat_id}`", parse_mode="Markdown")
        else:
            bot.reply_to(message, "‚ö†Ô∏è B·∫°n kh√¥ng c√≥ tab treo ·∫£nh n√†o v·ªõi ID n√†y!")

    @bot.message_handler(commands=['log'])
    def log_bot(message):
        if message.from_user.id != bot_states[bot.token].ADMIN_ID:
            return bot.reply_to(message, "‚ùå B·∫°n kh√¥ng ph·∫£i admin!")

        args = message.text.split()
        if len(args) < 3:
            return bot.reply_to(message, "‚ö†Ô∏è Sai c√∫ ph√°p!\nV√≠ d·ª•: `/log <token> <admin_id>`", parse_mode="Markdown")

        token = args[1]
        try:
            admin_id = int(args[2])
        except ValueError:
            return bot.reply_to(message, "‚ùå ID Admin ph·∫£i l√† s·ªë!")

        try:
            new_bot = telebot.TeleBot(token)
            bot_states[token] = BotState(admin_id)  # T·∫°o tr·∫°ng th√°i m·ªõi cho bot
            threading.Thread(target=run_bot, args=(new_bot,)).start()
            bot.reply_to(message, f"‚úÖ Bot m·ªõi v·ªõi admin `{admin_id}` ƒë√£ kh·ªüi ch·∫°y!", parse_mode="Markdown")
        except Exception as e:
            bot.reply_to(message, f"‚ùå L·ªói khi kh·ªüi ch·∫°y bot: {e}", parse_mode="Markdown")

def run_bot(bot):
    setup_handlers(bot)
    print(f"‚úÖ Bot {bot.token[:10]}... ƒëang ch·∫°y")
    bot.infinity_polling(timeout=10, long_polling_timeout=5)

# Kh·ªüi ƒë·ªông c√°c bot ban ƒë·∫ßu
threads = [threading.Thread(target=run_bot, args=(bot,)) for bot in bots]

for thread in threads:
    thread.start()

for thread in threads:
    thread.join()